<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.score.mapper.ScoreMapper">

    <!-- ImpactRow 映射（总指数/子指数/评价参数；第四层预留） -->
    <resultMap id="ImpactRowMap" type="com.example.score.domain.ImpactRow">
        <!-- 顶层 -->
        <result property="markTime"       column="markTime"/>
        <result property="topIndexValue"  column="topIndexValue"/>

        <!-- 子指数 -->
        <result property="subIndexName"   column="subIndexName"/>
        <result property="subIndexCode"   column="subIndexCode"/>
        <result property="subIndexWeight" column="subIndexWeight"/>
        <result property="subIndexValue"  column="subIndexValue"/>

        <!-- 评价参数 -->
        <result property="paramName"      column="paramName"/>
        <result property="paramCode"      column="paramCode"/>
        <result property="paramWeight"    column="paramWeight"/>
        <result property="paramValue"     column="paramValue"/>

        <!-- 预留（未用） -->
        <result property="basicName"      column="basicName"/>
        <result property="basicCode"      column="basicCode"/>
        <result property="basicUnit"      column="basicUnit"/>
        <result property="basicValue"     column="basicValue"/>
        <result property="blastName"      column="blastName"/>
        <result property="procParamId"    column="procParamId"/>
    </resultMap>

    <!--
      规则：
      1) 每个入参 time 建一个窗口 [time, time+59s]；
         顶层在窗口里优先取“等于入参秒”的记录，否则取窗内最新；
         markTime=顶层 GENERATE_TIME 的14位；value=INDEX_VALUE。
      2) 子指数/评价参数都与顶层时刻“同秒”对齐：
         子指数按 GENERATE_TIME 同秒；参数按 FETCH_TIME 同秒。
      3) 仅处理 INDEX_ID='B4TEN_I'；子指数限定五个名称以保证顺序。
    -->
    <select id="selectImpactRows" resultMap="ImpactRowMap" timeout="20">
        WITH
            -- 注意这里只声明三列，VALUES 也只给三列，避免 -418
            win(w, t_start, t_end) AS (
                VALUES
                    (1,
                     TIMESTAMP_FORMAT(#{time1}, 'YYYYMMDDHH24MISS'),
                     TIMESTAMP_FORMAT(#{time1}, 'YYYYMMDDHH24MISS') + 59 SECONDS),
                    (2,
                     TIMESTAMP_FORMAT(#{time2}, 'YYYYMMDDHH24MISS'),
                     TIMESTAMP_FORMAT(#{time2}, 'YYYYMMDDHH24MISS') + 59 SECONDS)
            ),

            -- 顶层（总指数）：每窗一条（优先等于入参秒，否则窗内最新）
            top_src AS (
                SELECT
                    w.w,
                    i.GENERATE_TIME                                    AS gt,
                    VARCHAR_FORMAT(i.GENERATE_TIME,'YYYYMMDDHH24MISS') AS markTime,
                    i.INDEX_VALUE                                      AS topIndexValue,
                    CASE WHEN i.GENERATE_TIME = w.t_start THEN 0 ELSE 1 END AS pref
                FROM win w
                         JOIN T_MD_DIAGNOSE_MODEL_DATA_INDEX i
                              ON i.INDEX_ID = 'B4TEN_I'
                                  AND i.GENERATE_TIME BETWEEN w.t_start AND w.t_end
            ),
            top_pick AS (
                SELECT w, markTime, gt, topIndexValue
                FROM (
                         SELECT w, markTime, gt, topIndexValue,
                                ROW_NUMBER() OVER (PARTITION BY w ORDER BY pref ASC, gt DESC) rn
                         FROM top_src
                     ) t
                WHERE rn = 1
            ),

            -- 子指数定义清单（固定顺序 + 兜底占位）
            sub_def AS (
                SELECT
                    si.SUBINDEX_ID,
                    si.SUBINDEX_NAME,
                    si.SUBINDEX_ID   AS subIndexCode,
                    si.WEIGHT     AS subIndexWeight,
                    CASE si.SUBINDEX_NAME
                        WHEN '下料稳定性' THEN 1
                        WHEN '压量关系稳定性' THEN 2
                        WHEN '炉缸工况稳定性' THEN 3
                        WHEN '操作炉型稳定性' THEN 4
                        WHEN '煤气流分布稳定性' THEN 5
                        ELSE 99
                        END AS ord
                FROM T_MD_DIAGNOSE_MODEL_SUBINDEX_INFO si
                WHERE si.INDEX_ID = 'B4TEN_I'
                  AND si.SUBINDEX_NAME IN ('下料稳定性','压量关系稳定性','炉缸工况稳定性','操作炉型稳定性','煤气流分布稳定性')
            ),

            -- 子指数取值（优先同秒，其次窗内，再次回溯 5 分钟）
            sub_val AS (
                SELECT
                    tp.w,
                    sd.SUBINDEX_ID,
                    sd.SUBINDEX_NAME,
                    sd.subIndexCode,
                    sd.subIndexWeight,
                    d.SUBINDEX_VALUE,
                    /* 三档优先级：0=同秒；1=窗内；2=回溯窗口（t_start-5min, t_start) */
                    CASE
                        WHEN d.GENERATE_TIME = tp.gt THEN 0
                        WHEN d.GENERATE_TIME BETWEEN w.t_start AND w.t_end THEN 1
                        ELSE 2
                        END AS pref,
                    d.GENERATE_TIME AS dgt,
                    ROW_NUMBER() OVER (
            PARTITION BY tp.w, sd.SUBINDEX_ID
            ORDER BY
                CASE
                    WHEN d.GENERATE_TIME = tp.gt THEN 0
                    WHEN d.GENERATE_TIME BETWEEN w.t_start AND w.t_end THEN 1
                    ELSE 2
                END ASC,
                d.GENERATE_TIME DESC
        ) rn
                FROM top_pick tp
                         JOIN win w ON w.w = tp.w
                         CROSS JOIN sub_def sd
                         LEFT JOIN T_MD_DIAGNOSE_MODEL_DATA_SUBINDEX d
                                   ON d.SUBINDEX_ID = sd.SUBINDEX_ID
                                       AND d.GENERATE_TIME BETWEEN (w.t_start - 5 MINUTES) AND w.t_end
                -- 如果存在高炉维度，可开启如下限制确保同一高炉：
                -- AND d.BLAST_ID = tp.blastId
            ),
            sub_pick AS (
                SELECT
                    w,
                    SUBINDEX_ID,
                    SUBINDEX_NAME,
                    subIndexCode,
                    subIndexWeight,
                    CASE WHEN rn = 1 THEN SUBINDEX_VALUE ELSE NULL END AS subIndexValue
                FROM sub_val
                WHERE rn = 1 OR rn IS NULL
            ),


            -- 评价参数定义（从权重与参数信息表挂到各子指数）
            param_def AS (
                SELECT
                    sd.SUBINDEX_ID,
                    w.PARAM_SCORE_ID         AS paramCode,
                    psi.NAME                 AS paramName,
                    w.WEIGHT                 AS paramWeight
                FROM sub_def sd
                         JOIN T_MD_DIAGNOSE_MODEL_PARAM_WEIGHT w
                              ON w.SUBINDEX_ID = sd.SUBINDEX_ID
                         JOIN T_MD_DIAGNOSE_PARAM_SCORE_INFO psi
                              ON psi.PARAM_SCORE_ID = w.PARAM_SCORE_ID
            ),

            -- 评价参数取值（同秒对齐，FETCH_TIME = 顶层 gt）
            param_val AS (
                SELECT
                    tp.w,
                    pd.SUBINDEX_ID,
                    pd.paramCode,
                    pd.paramName,
                    pd.paramWeight,
                    psd.DATA_VALUE           AS paramValue,
                    /* 优先同秒 */
                    CASE WHEN psd.FETCH_TIME = tp.gt THEN 0 ELSE 1 END AS pref,
                    psd.FETCH_TIME AS ft,
                    ROW_NUMBER() OVER (
                    PARTITION BY tp.w, pd.SUBINDEX_ID, pd.paramCode
                    ORDER BY
                    CASE WHEN psd.FETCH_TIME = tp.gt THEN 0 ELSE 1 END ASC,
                    psd.FETCH_TIME DESC
                ) rn
                FROM top_pick tp
                         JOIN win w ON w.w = tp.w
                         JOIN param_def pd ON 1=1
                         LEFT JOIN T_MD_DIAGNOSE_PARAM_SCORE_DATA psd
                                   ON psd.PARAM_SCORE_ID = pd.paramCode
                                       AND psd.FETCH_TIME BETWEEN w.t_start AND w.t_end
            ),
            param_pick AS (
                SELECT
                    w, SUBINDEX_ID, paramCode, paramName, paramWeight,
                    CASE WHEN rn = 1 THEN paramValue ELSE NULL END AS paramValue
                FROM param_val
                WHERE rn = 1 OR rn IS NULL
            ),
            -- ④ 评价参数 ⇨ 公式 ⇨ 小参数编码（最多提取前4个，可按需放大）
            rule_tok AS (
            -- 关联到每个 paramCode 的公式
            SELECT
                pp.w,
                pp.SUBINDEX_ID,
                pp.paramCode,
                r.FORMULA,
                -- 用 DB2 REGEXP_SUBSTR 提取第 n 个 BPI 编码；这里只演示前4个位
                REGEXP_SUBSTR(r.FORMULA, 'BPI[0-9]+', 1, 1) AS tok1,
                REGEXP_SUBSTR(r.FORMULA, 'BPI[0-9]+', 1, 2) AS tok2,
                REGEXP_SUBSTR(r.FORMULA, 'BPI[0-9]+', 1, 3) AS tok3,
                REGEXP_SUBSTR(r.FORMULA, 'BPI[0-9]+', 1, 4) AS tok4
            FROM param_pick pp
                     JOIN T_MD_DIAGNOSE_PARAM_SCORE_CALCULATE_RULE r
                          ON r.PARAM_SCORE_ID = pp.paramCode
        ),
-- 将横向的 tok1..tok4 拆成行（UNION ALL；你也可用递归/数字表更优雅地展开）
            basic_code AS (
                SELECT w, SUBINDEX_ID, paramCode, tok1 AS BASIC_PARAM_ID FROM rule_tok WHERE tok1 IS NOT NULL
                UNION ALL
                SELECT w, SUBINDEX_ID, paramCode, tok2 FROM rule_tok WHERE tok2 IS NOT NULL
                UNION ALL
                SELECT w, SUBINDEX_ID, paramCode, tok3 FROM rule_tok WHERE tok3 IS NOT NULL
                UNION ALL
                SELECT w, SUBINDEX_ID, paramCode, tok4 FROM rule_tok WHERE tok4 IS NOT NULL
            ),
-- 小参数元信息（名称/单位/过程ID/高炉）
            basic_def AS (
                SELECT
                    bc.w,
                    bc.SUBINDEX_ID,
                    bc.paramCode,
                    bpi.BASIC_PARAM_ID   AS basicCode,
                    bpi.BASIC_PARAM_NAME AS basicName,
                    bpi.UNIT             AS basicUnit,
                    bpi.CHUNBIAO_ID      AS procParamId,
                    bi.BLAST_NAME        AS blastName
                FROM basic_code bc
                         JOIN T_MD_DIAGNOSE_BASIC_PARAM_INFO bpi
                              ON bpi.BASIC_PARAM_ID = bc.BASIC_PARAM_ID
                         LEFT JOIN T_MD_DIAGNOSE_BLAST_INFO bi
                                   ON bi.BLAST_ID = bpi.BLAST_ID
            )

        SELECT
            -- 顶层
            tp.markTime                      AS markTime,
            tp.topIndexValue                 AS topIndexValue,

            -- 子指数
            sp.SUBINDEX_NAME                 AS subIndexName,
            sp.subIndexCode                  AS subIndexCode,
            sp.subIndexWeight                AS subIndexWeight,
            sp.subIndexValue                 AS subIndexValue,

            -- 评价参数
            pp.paramName                     AS paramName,
            pp.paramCode                     AS paramCode,
            pp.paramWeight                   AS paramWeight,
            pp.paramValue                    AS paramValue,

            -- 四层（骨架：静态字段，value 稍后批量补）
            bd.basicName,
            bd.basicCode,
            bd.basicUnit,
            bd.procParamId,
            bd.blastName

        FROM top_pick tp
                 LEFT JOIN sub_pick sp
                           ON sp.w = tp.w
                 LEFT JOIN param_pick pp
                           ON pp.w = tp.w
                               AND pp.SUBINDEX_ID = sp.SUBINDEX_ID
                 LEFT JOIN basic_def  bd ON bd.w = tp.w AND bd.SUBINDEX_ID = sp.SUBINDEX_ID
                                AND bd.paramCode = pp.paramCode


        ORDER BY tp.markTime ASC,
                 CASE sp.SUBINDEX_NAME
                     WHEN '下料稳定性' THEN 1
                     WHEN '压量关系稳定性' THEN 2
                     WHEN '炉缸工况稳定性' THEN 3
                     WHEN '操作炉型稳定性' THEN 4
                     WHEN '煤气流分布稳定性' THEN 5
                     ELSE 99
                     END,
                 pp.paramCode;
    </select>

    <select id="selectProcessDataValuesBatch" resultType="map">
        SELECT t.PARAMID AS paramId, t.VALUE AS value
        FROM ${table} t
        WHERE t.GENERATE_TIME = TIMESTAMP_FORMAT(#{time}, 'YYYYMMDDHH24MISS')
        AND t.PARAMID IN
        <foreach collection="paramIds" item="pid" open="(" close=")" separator=",">
            #{pid}
        </foreach>
    </select>

</mapper>
